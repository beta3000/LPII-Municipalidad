package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import utils.MySqlDBConexion;
import beans.InformeDTO;
import interfaces.InformeDAO;

public class MySqlInformeDAO implements InformeDAO {

	@Override
	public List<InformeDTO> listarInformesServicioVehicular() {
		List<InformeDTO> data = new ArrayList<InformeDTO>();
		InformeDTO i = null;
		Connection cn = null;
		PreparedStatement pstm = null;
		String sql = "";
		ResultSet rs = null;
		try {
			cn = MySqlDBConexion.getConexion();
			sql = "select i.idInforme,i.fechaInforme,i.fechaEntregaInforme,i.contenidoInforme,i.idUsuarioRemitente,"
					+ "i.idAsuntoInforme, ai.descripcionAsuntoInforme,"
					+ "i.idEstadoInforme, ei.descripcionEstadoInforme,"
					+ "i.idTallerMecanico, tm.nombreTallerMecanico "
					+ "from informe as i inner join asuntoinforme as ai "
					+ "on i.idAsuntoInforme = ai.idAsuntoInforme inner join estadoinforme as ei "
					+ "on i.idEstadoInforme = ei.idEstadoInforme left join tallerMecanico as tm "
					+ "on i.idTallerMecanico = tm.idTallerMecanico "
					+ "where i.idAsuntoInforme = 1";
			pstm = cn.prepareStatement(sql);
			rs = pstm.executeQuery();
			
			while(rs.next()){
				i = new InformeDTO();
				i.setIdInforme(rs.getInt(1));
				i.setFechainforme(rs.getString(2));
				i.setFechaEntregaInforme(rs.getString(3));
				i.setContenidoInforme(rs.getString(4));
				i.setIdUsuarioRemitente(rs.getInt(5));
				i.setIdAsuntoInforme(rs.getInt(6));
				i.setDescripcionAsuntoInforme(rs.getString(7));
				i.setIdEstadoInforme(rs.getInt(8));
				i.setDescripcionEstadoInforme(rs.getString(9));
				i.setIdTallerMecanico(rs.getInt(10));
				i.setNombreTallerMecanico(rs.getString(11));
				
				data.add(i);
				System.out.println(i);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			try {
				if(rs != null){rs.close();}
				if(pstm != null){pstm.close();}
				if(cn != null){cn.close();}
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		return data;
	}

	@Override
	public List<InformeDTO> listarInformesReparacionVehicular() {
		List<InformeDTO> data = new ArrayList<InformeDTO>();
		InformeDTO i = null;
		Connection cn = null;
		PreparedStatement pstm = null;
		String sql = "";
		ResultSet rs = null;
		try {
			cn = MySqlDBConexion.getConexion();
			sql = "select i.idInforme,i.fechaInforme,i.fechaEntregaInforme,i.contenidoInforme,i.idUsuarioRemitente,"
					+ "i.idAsuntoInforme, ai.descripcionAsuntoInforme, "
					+ "i.idEstadoInforme, ei.descripcionEstadoInforme, "
					+ "i.idTallerMecanico, tm.nombreTallerMecanico "
					+ " from informe as i inner join asuntoinforme as ai "
					+ " on i.idAsuntoInforme = ai.idAsuntoInforme inner join estadoinforme as ei "
					+ " on i.idEstadoInforme = ei.idEstadoInforme inner join tallerMecanico as tm "
					+ " on i.idTallerMecanico = tm.idTallerMecanico "
					+ " where i.idAsuntoInforme = 2";
			pstm = cn.prepareStatement(sql);
			rs = pstm.executeQuery();
			
			while(rs.next()){
				i = new InformeDTO();
				i = new InformeDTO();
				i.setIdInforme(rs.getInt(1));
				i.setFechainforme(rs.getString(2));
				i.setFechaEntregaInforme(rs.getString(3));
				i.setContenidoInforme(rs.getString(4));
				i.setIdUsuarioRemitente(rs.getInt(5));
				i.setIdAsuntoInforme(rs.getInt(6));
				i.setDescripcionAsuntoInforme(rs.getString(7));
				i.setIdEstadoInforme(rs.getInt(8));
				i.setDescripcionEstadoInforme(rs.getString(9));
				i.setIdTallerMecanico(rs.getInt(10));
				i.setNombreTallerMecanico(rs.getString(11));
				
				data.add(i);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			try {
				if(rs != null){rs.close();}
				if(pstm != null){pstm.close();}
				if(cn != null){cn.close();}
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		return data;
	}

	@Override
	public int registrarInformeServicioVehicular(InformeDTO i) {
		int estado = -1;
		Connection cn = null;
		PreparedStatement pstm = null;
		String sql = "";
		
		try {
			cn = MySqlDBConexion.getConexion();
			sql = "insert into informe values(null,?,?,?,?,1,1,null,?)";
			pstm = cn.prepareStatement(sql);
			pstm.setString(1, i.getFechainforme());
			pstm.setString(2, i.getFechaEntregaInforme());
			pstm.setString(3, i.getContenidoInforme());
			pstm.setInt(4, i.getIdUsuarioRemitente());
			pstm.setInt(5, i.getIdVehiculo());
			
			estado = pstm.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			try {
				if(pstm != null){pstm.close();}
				if(cn != null){cn.close();}
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		return estado;
	}

	@Override
	public int registrarInformeReparacionVehicular(InformeDTO i) {
		int estado = -1;
		Connection cn = null;
		PreparedStatement pstm = null;
		String sql = "";
		
		try {
			cn = MySqlDBConexion.getConexion();
			sql = "insert into informe values(null,?,?,?,null,2,1,?,?)";
			pstm = cn.prepareStatement(sql);
			pstm.setString(1, i.getFechainforme());
			pstm.setString(2, i.getFechaEntregaInforme());
			pstm.setString(3, i.getContenidoInforme());
			pstm.setInt(4, i.getIdTallerMecanico());
			pstm.setInt(5, i.getIdVehiculo());
			
			estado = pstm.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			try {
				if(pstm != null){pstm.close();}
				if(cn != null){cn.close();}
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		return estado;
	}

	@Override
	public int aprobarInforme(int idInforme) {
		int estado = -1;
		Connection cn = null;
		PreparedStatement pstm = null;
		String sql = "";
		
		try {
			cn = MySqlDBConexion.getConexion();
			sql = "update informe "
					+ "set idEstadoInforme = 2 "
					+ "where idInforme = ?";
			pstm = cn.prepareStatement(sql);
			pstm.setInt(1, idInforme);
			estado = pstm.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			try {
				if(pstm != null){pstm.close();}
				if(cn != null){cn.close();}
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		return estado;
	}

	@Override
	public int desaprobarInforme(int idInforme) {
		int estado = -1;
		Connection cn = null;
		PreparedStatement pstm = null;
		String sql = "";
		
		try {
			cn = MySqlDBConexion.getConexion();
			sql = "update informe "
					+ "set idEstadoInforme = 3 "
					+ "where idInforme = ?";
			pstm = cn.prepareStatement(sql);
			pstm.setInt(1, idInforme);
			estado = pstm.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			try {
				if(pstm != null){pstm.close();}
				if(cn != null){cn.close();}
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		return estado;
	}

	@Override
	public InformeDTO buscarInforme(int idInforme) {
		InformeDTO i = null;
		Connection cn = null;
		PreparedStatement pstm = null;
		String sql = "";
		ResultSet rs = null;
		try {
			cn = MySqlDBConexion.getConexion();
			sql = "select i.idInforme,i.fechaInforme,i.fechaEntregaInforme,i.contenidoInforme,i.idUsuarioRemitente,"
					+ "i.idAsuntoInforme, ai.descripcionAsuntoInforme, "
					+ "i.idEstadoInforme, ei.descripcionEstadoInforme, "
					+ "i.idTallerMecanico, tm.nombreTallerMecanico "
					+ " from informe as i inner join asuntoinforme as ai "
					+ " on i.idAsuntoInforme = ai.idAsuntoInforme inner join estadoinforme as ei "
					+ " on i.idEstadoInforme = ei.idEstadoInforme inner join tallerMecanico as tm "
					+ " on i.idTallerMecanico = tm.idTallerMecanico "
					+ " where i.idInforme = ?";
			pstm = cn.prepareStatement(sql);
			pstm.setInt(1, idInforme);
			rs = pstm.executeQuery();
			
			if(rs.next()){
				i = new InformeDTO();
				i.setIdInforme(rs.getInt(1));
				i.setFechainforme(rs.getString(2));
				i.setFechaEntregaInforme(rs.getString(3));
				i.setContenidoInforme(rs.getString(4));
				i.setIdUsuarioRemitente(rs.getInt(5));
				i.setIdAsuntoInforme(rs.getInt(6));
				i.setDescripcionAsuntoInforme(rs.getString(7));
				i.setIdEstadoInforme(rs.getInt(8));
				i.setDescripcionEstadoInforme(rs.getString(9));
				i.setIdTallerMecanico(rs.getInt(10));
				i.setNombreTallerMecanico(rs.getString(11));

			}
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			try {
				if(rs != null){rs.close();}
				if(pstm != null){pstm.close();}
				if(cn != null){cn.close();}
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		return i;
	}

}
